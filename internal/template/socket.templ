package template

templ Socket() {
	@Layout ("Socket") {
		<div class="w-full md:container mx-auto p-2 md:p-5 bg-[#202018] text-white flex flex-col">
			<div class="flex flex-col items-center justify-center w-full">
				<input id="msg-input" class="w-full px-3 py-1 text-sm rounded-lg mb-2 border-2 border-white outline-none focus:ring-0" placeholder="Type Message..."/>
				<button id="send" class="w-fit py-2 px-4 cursor-pointer text-sm border border-white font-bold rounded-lg">
					Send
				</button>
			</div>

			<div class="flex flex-col justify-senter items-center gap-3">
				<h1 class="text-xl text-center font-extrabold tracking-wide">COMMANDS</h1>

				<div class="flex gap-3 items-center">
					<button id="blink" class="p-2 cursor-pointer text-sm border-2 border-white font-bold rounded-lg">
						BLINK ON
					</button>
				</div>
			</div>
		</div>
		<script>
		   let err = null;
			let blink_state = false

		   document.addEventListener("DOMContentLoaded", () => {
            const inputMsg = document.getElementById("msg-input");
            const send = document.getElementById("send");
           	const blink = document.getElementById("blink");
		      // const socket = new WebSocket("ws://localhost:8080/ws/admin");
		      const socket = new WebSocket("ws://localhost:80/ws/admin");

		      // Handle incoming WebSocket messages
		      socket.onmessage = (e) => {
		         const data = JSON.parse(e?.data);
					console.log(data);
					if (data?.type === "blink") {
					   if (data?.msg === "on") {
							blink.textContent = "BLINK OFF";
							blink_state = true;
						} else if (data?.msg === "off") {
							blink.textContent = "BLINK ON";
							blink_state = false;
						}
					}
		      };

		      // Handle successful WebSocket connection
		      socket.onopen = (e) => {
		         console.log("WebSocket connection opened:", e);
		      };

		      // Handle WebSocket errors
		      socket.onerror = (e) => {
		         console.error("WebSocket error:", e);
		         err = "error";
		         // Optionally, show an error message in the UI
		         alert("WebSocket error, please check the console.");
		      };

		      // Handle WebSocket closure
		      socket.onclose = (e) => {
		         console.log("WebSocket connection closed:", e);
		         err = "closed";
		      };

				blink.addEventListener("click", () => {
				   if (blink_state) {
					   socket.send("BLINK OFF")
				   } else {
					   socket.send("BLINK ON")
				   }
				});

		      send.addEventListener("click", () => {
		         if (socket.readyState === WebSocket.OPEN) {
   					const d = inputMsg.value
                  if (d.length === 0) return

                  socket.send(d.trim())

                  inputMsg.value = ""
		         } else {
		            console.warn("WebSocket is not open yet.");
		         }
		      });
		   });
		</script>
	}
}
