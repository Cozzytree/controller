// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Socket() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"w-full md:container mx-auto p-2 md:p-5 bg-[#202018] text-white flex flex-col\"><div class=\"flex flex-col items-center justify-center w-full\"><input id=\"msg-input\" class=\"w-full px-3 py-1 text-sm rounded-lg mb-2 border-2 border-white outline-none focus:ring-0\" placeholder=\"Type Message...\"> <button id=\"send\" class=\"w-fit py-2 px-4 cursor-pointer text-sm border border-white font-bold rounded-lg\">Send</button></div><div class=\"flex flex-col justify-senter items-center gap-3\"><h1 class=\"text-xl text-center font-extrabold tracking-wide\">COMMANDS</h1><div class=\"flex gap-3 items-center\"><button id=\"blink\" class=\"p-2 cursor-pointer text-sm border-2 border-white font-bold rounded-lg\">BLINK ON</button></div></div></div><script>\n\t\t   let err = null;\n\t\t\tlet blink_state = false\n\n\t\t   document.addEventListener(\"DOMContentLoaded\", () => {\n            const inputMsg = document.getElementById(\"msg-input\");\n            const send = document.getElementById(\"send\");\n           \tconst blink = document.getElementById(\"blink\");\n\t\t      // const socket = new WebSocket(\"ws://localhost:8080/ws/admin\");\n\t\t      const socket = new WebSocket(\"ws://localhost:80/ws/admin\");\n\n\t\t      // Handle incoming WebSocket messages\n\t\t      socket.onmessage = (e) => {\n\t\t         const data = JSON.parse(e?.data);\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t\tif (data?.type === \"blink\") {\n\t\t\t\t\t   if (data?.msg === \"on\") {\n\t\t\t\t\t\t\tblink.textContent = \"BLINK OFF\";\n\t\t\t\t\t\t\tblink_state = true;\n\t\t\t\t\t\t} else if (data?.msg === \"off\") {\n\t\t\t\t\t\t\tblink.textContent = \"BLINK ON\";\n\t\t\t\t\t\t\tblink_state = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t      };\n\n\t\t      // Handle successful WebSocket connection\n\t\t      socket.onopen = (e) => {\n\t\t         console.log(\"WebSocket connection opened:\", e);\n\t\t      };\n\n\t\t      // Handle WebSocket errors\n\t\t      socket.onerror = (e) => {\n\t\t         console.error(\"WebSocket error:\", e);\n\t\t         err = \"error\";\n\t\t         // Optionally, show an error message in the UI\n\t\t         alert(\"WebSocket error, please check the console.\");\n\t\t      };\n\n\t\t      // Handle WebSocket closure\n\t\t      socket.onclose = (e) => {\n\t\t         console.log(\"WebSocket connection closed:\", e);\n\t\t         err = \"closed\";\n\t\t      };\n\n\t\t\t\tblink.addEventListener(\"click\", () => {\n\t\t\t\t   if (blink_state) {\n\t\t\t\t\t   socket.send(\"BLINK OFF\")\n\t\t\t\t   } else {\n\t\t\t\t\t   socket.send(\"BLINK ON\")\n\t\t\t\t   }\n\t\t\t\t});\n\n\t\t      send.addEventListener(\"click\", () => {\n\t\t         if (socket.readyState === WebSocket.OPEN) {\n   \t\t\t\t\tconst d = inputMsg.value\n                  if (d.length === 0) return\n\n                  socket.send(d.trim())\n\n                  inputMsg.value = \"\"\n\t\t         } else {\n\t\t            console.warn(\"WebSocket is not open yet.\");\n\t\t         }\n\t\t      });\n\t\t   });\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout("Socket").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
