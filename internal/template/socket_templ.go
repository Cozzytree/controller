// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package template

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Socket() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"w-full bg-[#202018] text-white flex flex-col\"><input id=\"msg-input\" class=\"p-2 rounded-md\"> <button id=\"send\">send</button><div class=\"flex items-center gap-3\"><button id=\"light-on\" class=\"p-1 text-sm\">LIGHT ON</button> <button id=\"light-off\" class=\"p-1 text-sm\">LIGHT OFF</button></div></div><script>\n\t\t   let err = null;\n\n\t\t   document.addEventListener(\"DOMContentLoaded\", () => {\n\t\t      const socket = new WebSocket(\"ws://localhost:8080/ws/admin\");\n\n\t\t      // Handle incoming WebSocket messages\n\t\t      socket.onmessage = (e) => {\n\t\t         console.log(\"Message from server:\", e.data);\n\t\t      };\n\n\t\t      // Handle successful WebSocket connection\n\t\t      socket.onopen = (e) => {\n\t\t         console.log(\"WebSocket connection opened:\", e);\n\t\t      };\n\n\t\t      // Handle WebSocket errors\n\t\t      socket.onerror = (e) => {\n\t\t         console.error(\"WebSocket error:\", e);\n\t\t         err = \"error\";\n\t\t         // Optionally, show an error message in the UI\n\t\t         alert(\"WebSocket error, please check the console.\");\n\t\t      };\n\n\t\t      // Handle WebSocket closure\n\t\t      socket.onclose = (e) => {\n\t\t         console.log(\"WebSocket connection closed:\", e);\n\t\t         err = \"closed\";\n\t\t      };\n\n\t\t      // Handle message input and send to server\n\t\t      const inputMsg = document.getElementById(\"msg-input\");\n\t\t      const send = document.getElementById(\"send\");\n\t\t\t\tconst lightOn = document.getElementById(\"light-on\");\n\t\t\t\tconst lightOff = document.getElementById(\"light-off\");\n\n\t\t\t\tlightOn.addEventListener(\"click\", () => {\n\t\t\t\t   socket.send(\"LIGHT ON\")\n\t\t\t\t});\n\n\t\t\t\tlightOff.addEventListener(\"click\", () => {\n\t\t\t\t   socket.send(\"LIGHT OFF\")\n\t\t\t\t});\n\n\t\t      send.addEventListener(\"click\", () => {\n\t\t         if (socket.readyState === WebSocket.OPEN) {\n   \t\t\t\t\tconst d = inputMsg.value\n                  if (d.length === 0) return\n\n                  socket.send(d.trim())\n\n                  inputMsg.value = \"\"\n\t\t         } else {\n\t\t            console.warn(\"WebSocket is not open yet.\");\n\t\t         }\n\t\t      });\n\t\t   });\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout("Socket").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
